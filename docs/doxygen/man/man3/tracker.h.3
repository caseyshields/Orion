.TH "src/h/tracker.h" 3 "Mon Jun 18 2018" "Version 1.0" "Orion" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/h/tracker.h
.SH SYNOPSIS
.br
.PP
\fC#include 'novas\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBTracker\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSECONDS_IN_DAY\fP   86400\&.0"
.br
.ti -1c
.RI "#define \fBDELTA_TT\fP   32\&.184"
.br
.ti -1c
.RI "#define \fBREDUCED_ACCURACY\fP   1"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBtracker_create\fP (\fBTracker\fP *tracker, double ut1_utc, double leap_secs)"
.br
.ti -1c
.RI "void \fBtracker_set_time\fP (\fBTracker\fP *tracker, double utc_unix_seconds)"
.br
.ti -1c
.RI "double \fBtracker_get_TT\fP (\fBTracker\fP *tracker)"
.br
.ti -1c
.RI "double \fBtracker_get_UT1\fP (\fBTracker\fP *tracker)"
.br
.ti -1c
.RI "double \fBtracker_get_UTC\fP (\fBTracker\fP *tracker)"
.br
.ti -1c
.RI "double \fBtracker_get_DeltaT\fP (\fBTracker\fP *tracker)"
.br
.ti -1c
.RI "void \fBtracker_set_location\fP (\fBTracker\fP *tracker, double latitude, double longitude, double height)"
.br
.ti -1c
.RI "\fBon_surface\fP \fBtracker_get_location\fP (\fBTracker\fP *tracker)"
.br
.ti -1c
.RI "void \fBtracker_set_weather\fP (\fBTracker\fP *tracker, double temperature, double pressure)"
.br
.ti -1c
.RI "int \fBtracker_to_horizon\fP (\fBTracker\fP *tracker, \fBcat_entry\fP *target, double *zenith_distance, double *topocentric_azimuth)"
.br
.ti -1c
.RI "int \fBtracker_zenith\fP (\fBTracker\fP *tracker, double *right_ascension, double *declination)"
.br
.ti -1c
.RI "void \fBtracker_print_time\fP (\fBTracker\fP *tracker)"
.br
.ti -1c
.RI "void \fBtracker_print_site\fP (\fBTracker\fP *tracker)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define DELTA_TT   32\&.184"

.SS "#define REDUCED_ACCURACY   1"

.SS "#define SECONDS_IN_DAY   86400\&.0"

.SH "Function Documentation"
.PP 
.SS "int tracker_create (\fBTracker\fP * tracker, double ut1_utc, double leap_secs)"
Initializes or allocates the given tracker structure 
.PP
\fBParameters:\fP
.RS 4
\fItracker\fP A pointer to an existing structure or NULL\&. If NULL a structure is allocated\&. 
.br
\fIut1_utc\fP Current difference between UT1 and UTC time, usually obtained from IERS bulletin A 
.br
\fIleap_secs\fP Current number of leap seconds in TAI, usually obtained from IERS bulletin A 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the initialized or allocated structure 
.RE
.PP

.SS "double tracker_get_DeltaT (\fBTracker\fP * tracker)"

.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.SS "\fBon_surface\fP tracker_get_location (\fBTracker\fP * tracker)"

.PP
\fBReturns:\fP
.RS 4
The current geodetic location using the novas convention 
.RE
.PP

.SS "double tracker_get_TT (\fBTracker\fP * tracker)"

.PP
\fBReturns:\fP
.RS 4
terrestrial time in julian hours, a somewhat obscure Novas convention\&. TT = UTC + leap_seconds + 32\&.184\&. 
.RE
.PP

.SS "double tracker_get_UT1 (\fBTracker\fP * tracker)"

.PP
\fBReturns:\fP
.RS 4
The time in UT1, a time scale which depends on the non-uniform rotation of the earth\&. It is derived by adding an empirically determined offset to UTC 
.RE
.PP

.SS "double tracker_get_UTC (\fBTracker\fP * tracker)"

.PP
\fBReturns:\fP
.RS 4
The Universal Coordinated Time in Julian hours\&. 
.RE
.PP

.SS "void tracker_print_site (\fBTracker\fP * tracker)"

.SS "void tracker_print_time (\fBTracker\fP * tracker)"

.SS "void tracker_set_location (\fBTracker\fP * tracker, double latitude, double longitude, double height)"
Sets the location of the tracker on earth geoid\&. 
.PP
\fBParameters:\fP
.RS 4
\fItracker\fP object whose coordinates are set 
.br
\fIlatitude\fP in degrees 
.br
\fIlongitude\fP in degrees 
.br
\fIheight\fP in meters 
.RE
.PP

.SS "void tracker_set_time (\fBTracker\fP * tracker, double utc_unix_seconds)"
Sets the current time for the star tracker 
.PP
\fBParameters:\fP
.RS 4
\fIutc_unix_seconds\fP Seconds since the unix epoch(January 1, 1970) in Universal Coordinated Time 
.RE
.PP

.SS "void tracker_set_weather (\fBTracker\fP * tracker, double temperature, double pressure)"
A simple model is used to estimate atmospheric refraction by novas\&. This sets it's coefficients\&. 
.PP
\fBParameters:\fP
.RS 4
\fItemperature\fP the temperature at the sensor in degrees Celsius\&. 
.br
\fIpressure\fP the air pressure at the sensor in millibars\&. 
.RE
.PP

.SS "int tracker_to_horizon (\fBTracker\fP * tracker, \fBcat_entry\fP * target, double * zenith_distance, double * topocentric_azimuth)"
the local horizon coordinates of the target relative to the tracker 
.PP
\fBParameters:\fP
.RS 4
\fItracker\fP The tracker to compute the direction from 
.br
\fItarget\fP A novas catalog entry to point at 
.br
\fIzenith_distance\fP Output argument returning the angular offset from the local zenith in degrees 
.br
\fItopocentric_azimuth\fP Output argument returning the clockwise angular offset from north in degrees 
.RE
.PP
\fBReturns:\fP
.RS 4
Zero on success, otherwise a Novas error code\&. 
.RE
.PP

.SS "int tracker_zenith (\fBTracker\fP * tracker, double * right_ascension, double * declination)"
returns the current location of the given tracker's zenith in celestial coordinates\&. 
.PP
\fBParameters:\fP
.RS 4
\fItracker\fP Location used to compute the zenith vector 
.br
\fIright_ascension\fP Celestial spherical coordinates of zenith in hours 
.br
\fIdeclination\fP Celestial spherical coordinates of zenith in degrees 
.RE
.PP
\fBReturns:\fP
.RS 4
Zero on success, otherwise a Novas error code\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Orion from the source code\&.
